"""
Generate a mitmproxy dump file.

This script demonstrates how to generate a mitmproxy dump file,
as it would also be generated by passing `-w` to mitmproxy.
In contrast to `-w`, this gives you full control over which
flows should be saved and also allows you to rotate files or log
to multiple files in parallel.
"""

import os
import random
from typing import BinaryIO
from typing import TextIO

from mitmproxy import http
from mitmproxy import io

import datetime
import json
import pymysql
import redis
from dbutils.pooled_db import PooledDB
import datetime
import time
import subprocess
import socket

class Writer:
    def __init__(self) -> None:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        filePath = os.path.join(current_dir, datetime.datetime.now().strftime("%Y%m%d"))
        #filePath = "/Users/victory/Downloads/mitmproxy/" + datetime.datetime.now().strftime("%Y%m%d")
        try:
            os.mkdir(filePath)
        except FileExistsError:
            pass
        try:
            os.mkdir(os.path.join(filePath, 'token'))
        except FileExistsError:
            pass
        try:
            os.mkdir(os.path.join(current_dir, 'needDecrypt'))
        except FileExistsError:
            pass
        self.filePath: str = filePath
        self.filePath_needDecrypt: str = os.path.join(current_dir, 'needDecrypt')
        self.f: TextIO = open(os.path.join(filePath, 'log.txt'), "a")
        self.token_last_login_time_dict = {}
        self.token_uid_dict = {}
        self.current_dir = current_dir
        self.gen_redis()

    def gen_redis(self):
        self.redis = redis.Redis(host='xxx', port=6379,
                                 password='xxx', db=8)

    def connect_to_database(self):
        """连接到数据库"""
        return pymysql.connect(
            host='xxx',
            port=3306,
            user='xxx',
            password='xxx',
            database='xxx',
            charset='utf8',
            cursorclass=pymysql.cursors.DictCursor
        )

    def query_task_by_cid(self, connection, task_type, cid):
        """根据ID查询一条数据"""
        try:
            with connection.cursor() as cursor:
                sql = "SELECT * FROM t_spider_task WHERE task_type = %s and clause_cid = %s order by id desc limit 1"
                cursor.execute(sql, (task_type, cid,))
                result = cursor.fetchone()
                return result
        except Exception as e:
            print(f"Query task error: {e}")

    def done_task(self, connection, id):
        try:
            with connection.cursor() as cursor:
                sql = "UPDATE t_spider_task SET task_status = 2 WHERE id = %s"
                cursor.execute(sql, (id,))

                # 提交事务以保存更改
                connection.commit()

        except Exception as e:
            print(f"Update task done error: {e}")
            # 发生错误时回滚事务
            connection.rollback()

    def done_task_update_http_log_id(self, connection, id, http_log_id):
        try:
            with connection.cursor() as cursor:
                sql = "UPDATE t_spider_task SET task_status = 2, http_log_id = %s WHERE id = %s"
                cursor.execute(sql, (http_log_id, id,))

                # 提交事务以保存更改
                connection.commit()

        except Exception as e:
            print(f"Update task done error: {e}")
            # 发生错误时回滚事务
            connection.rollback()

    def query_pdf_log_by_cid(self, connection, cid):
        """根据ID查询一条数据"""
        try:
            with connection.cursor() as cursor:
                sql = "SELECT * FROM t_spider_pdf_log WHERE cid = %s order by id desc limit 1"
                cursor.execute(sql, (cid,))
                result = cursor.fetchone()
                return result
        except Exception as e:
            print(f"Query task error: {e}")

    def query_clause_detail_http_log_by_cid(self, connection, cid):
        """根据ID查询一条数据"""
        try:
            with connection.cursor() as cursor:
                sql = "SELECT * FROM t_spider_http_log WHERE log_key = %s and log_type = 5 order by id desc limit 1"
                cursor.execute(sql, ('id='+cid,))
                result = cursor.fetchone()
                return result
        except Exception as e:
            print(f"Query task error: {e}")

    def update_clause_detail_http_log(self, connection, id, decryt):
        try:
            with connection.cursor() as cursor:
                sql = "UPDATE t_spider_http_log SET decrypt = %s WHERE id = %s"
                cursor.execute(sql, (decryt, id,))

                # 提交事务以保存更改
                connection.commit()

        except Exception as e:
            print(f"Update clause_deal_http_log error: {e}")
            # 发生错误时回滚事务
            connection.rollback()

    def insert_clause_detail_http_log(self, connection, token, lastLoginTime, uid, cid, content, decryt):
        try:
            with connection.cursor() as cursor:
                # 创建插入SQL语句
                sql = "INSERT INTO `t_spider_http_log` (`log_key`, `log_type`, `response`, `decrypt`, `uid`, `token`, `last_login_time`) VALUES (%s, %s, %s, %s, %s, %s, %s)"

                # 执行SQL语句
                cursor.execute(sql, ('id='+cid, 5, content, decryt, uid, token, lastLoginTime))

                # 提交事务
                connection.commit()
        except pymysql.MySQLError as e:
            print(f"Error insert_clause_detail_http_log: {e}")

    def query_record_id_by_company_id(self, connection, company_id):
        """根据ID查询一条数据"""
        try:
            with connection.cursor() as cursor:
                sql = "SELECT * FROM t_spider_outer_relationship WHERE outer_id = %s and data_type = 1 limit 1"
                cursor.execute(sql, (company_id,))
                result = cursor.fetchone()
                return result['record_id']
        except Exception as e:
            print(f"Query task error: {e}")
            return ''

    def update_pdf_log(self, connection, pdf_log_id, pdf_url, task_id):
        """更新name字段"""
        try:
            with connection.cursor() as cursor:
                sql = "UPDATE t_spider_pdf_log SET third_pdf_url = %s, task_id = %s, deal_count = 0 WHERE id = %s"
                cursor.execute(sql, (pdf_url, task_id, pdf_log_id))

                # 提交事务以保存更改
                connection.commit()

        except Exception as e:
            print(f"Update pdf error: {e}")
            # 发生错误时回滚事务
            connection.rollback()

    def insert_pdf_log(self, connection, cid, pdf_url, relation_record_id, year, task_id):
        try:
            with connection.cursor() as cursor:
                # 创建插入SQL语句
                sql = "INSERT INTO `t_spider_pdf_log` (`cid`, `task_id`, `company_id`, `year`, `third_pdf_url`, `deal_count`) VALUES (%s, %s, %s, %s, %s, %s)"

                # 执行SQL语句
                cursor.execute(sql, (cid, task_id, relation_record_id, year, pdf_url, 0))

                # 提交事务
                connection.commit()
        except pymysql.MySQLError as e:
            print(f"Error insert_pdf_log: {e}")

    def push_pdf_log(self, pdf_log_id:str):
        self.redis.lpush('spider:pdf_task_list', pdf_log_id)
        print(f'pdf_task_list {pdf_log_id}')

    def pdf_deal(self, content):
        print(f"pdf接口返回值: {content}")
        if content:
            data = json.loads(content)
            if data:
                cid = data["data"]["cid"]
                company_id = data["data"]["company_id"]
                literal_year = data["data"]["literal_year"]
                if cid:
                    pdf_url = data["data"]["pdf_url_real"]
                    if pdf_url:
                        connection = self.connect_to_database()
                        if connection:
                            task_info = self.query_task_by_cid(connection, 'clausePdfByPerson', cid)
                            if task_info:
                                record_id = self.query_record_id_by_company_id(connection, company_id)
                                pdf_log = self.query_pdf_log_by_cid(connection, cid)
                                if pdf_log:
                                    self.update_pdf_log(connection, pdf_log['id'], pdf_url, task_info['id'])
                                    self.done_task(connection, task_info['id'])
                                    self.push_pdf_log(str(pdf_log['id']))
                                else:
                                    self.insert_pdf_log(connection, cid, pdf_url, record_id, literal_year, task_info['id'])
                                    pdf_log = self.query_pdf_log_by_cid(connection, cid)
                                    self.done_task(connection, task_info['id'])
                                    self.push_pdf_log(str(pdf_log['id']))
                            else:
                                print(f'clausePdfByPerson no task cid {cid}')
                            connection.close()

    def get_current_time(self):
        # 获取当前时间
        now = datetime.datetime.now()

        # 将当前时间转换为自epoch（1970年1月1日）以来的秒数，并乘以1000转换为毫秒
        milliseconds = int(time.mktime(now.timetuple()) * 1000 + now.microsecond / 1000)

        return milliseconds

    def clause_detail_deal(self, token, lastLoginTime, uid, cid, content):
        print('================clause_detail_deal')
        connection = self.connect_to_database()
        if connection:
            task_info = self.query_task_by_cid(connection, 'clauseDetailByPerson', cid)
            if task_info:
                print(f'================clause_detail_deal {token} {lastLoginTime} {uid} {cid} {len(content)}')
                file_name = os.path.join(self.filePath_needDecrypt, "t_" + token+"_" + str(self.get_current_time()) + ".txt")
                f: TextIO = open(file_name, "w")
                # unicode 转为 中文
                f.write(content)
                f.close()
                print(f'================clause_detail_deal {file_name}')

                node_script_path = os.path.join(self.current_dir, 'nodejs', 'dataDecrypt.js')
                result = subprocess.run(['node', node_script_path, token, str(lastLoginTime), file_name], capture_output=True, text=True)
                os.remove(file_name)
                if result:
                    stdout = result.stdout.strip()
                    result = stdout.encode('utf-8').decode('unicode_escape')
                    print(f'================detail result len is {len(result)}')
                    http_log = self.query_clause_detail_http_log_by_cid(connection, cid)
                    if http_log:
                        self.update_clause_detail_http_log(connection, http_log['id'], result)
                        self.done_task_update_http_log_id(connection, task_info['id'], http_log['id'])
                    else:
                        self.insert_clause_detail_http_log(connection, token, lastLoginTime, uid, cid, content, result)
                        http_log = self.query_clause_detail_http_log_by_cid(connection, cid)
                        self.done_task_update_http_log_id(connection, task_info['id'], http_log['id'])
                else:
                    print(f'================detail result fail {cid}')
            else:
                print(f'================detail task null {cid}')
            connection.close()
        else:
            print(f'================detail connect null {cid}')


    def get_ip_address(self):
        try:
            # 创建一个socket对象
            s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            # 不需要真正连接到一个远程服务器，只需设置一个远程地址即可
            s.connect(("8.8.8.8", 80))
            # 获取本地端（即本机）的IP地址
            ip_address = s.getsockname()[0]
        finally:
            # 关闭socket连接
            s.close()

        return ip_address

    def response(self, flow: http.HTTPFlow) -> None:
        self.f.write(flow.request.path+'\n')
        # 仅针对某个域名
        if flow.response and flow.request and flow.request.host == "xxxxx":
            #self.f.write("match host")
            if flow.request.path.find("api/xxxx-weixin/v1/mp/userinfo") != -1:
                if flow.response.content:
                    pass
                return

            if flow.response.status_code == 200 and flow.response.content:
                if flow.response.headers and flow.response.headers["Content-Type"] and flow.response.headers["Content-Type"].find("application/json") != -1:
                    self.test_redis()

                    contentJson = json.loads(flow.response.content)
                    ip = self.get_ip_address()
                    jxxs_err_key = 'spider:ip_error'
                    if contentJson and contentJson["errcode"] and contentJson["errcode"] == 200:
                        filename: str = None
                        mstr = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S_%f")
                        token = flow.request.headers["token"]
                        pathParams: str = ""
                        if len(flow.request.path.split("?")) > 1:
                            pathParams = self.f.write(flow.request.path.split("?")[1])

                        if flow.request.path.find("api/xxxx-user-center/v1/user/current") != -1:
                            filename = os.path.join(self.filePath,'token', flow.request.headers["token"]+".txt")
                            data = json.loads(flow.response.content.decode('utf-8'))
                            temp_lastLoginTime = data['data']['lastLoginTime']
                            temp_token = data['data']['token']
                            temp_uid = data['data']['uid']
                            self.token_last_login_time_dict[temp_token] = temp_lastLoginTime
                            self.token_uid_dict[temp_token] = temp_uid
                            print(temp_token, self.token_last_login_time_dict[temp_token])
                            print(temp_token, self.token_uid_dict[temp_token])

                        if flow.request.path.find("api/search-server/v1/company/suggestion") != -1:
                            # 保险公司列表
                            filename = os.path.join(self.filePath, "companyList&time="+mstr+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/company/info") != -1:
                            # 保险公司详情
                            filename = os.path.join(self.filePath, "companyInfo&token="+token+"&cid="+flow.request.query["cid"]+".txt")
                        
                        if flow.request.path.find("api/search-server/v1/insurance/search") != -1:
                            self.deal_insurance_search(flow.response.content.decode('utf-8'))

                            # 条款搜索
                            filename = os.path.join(self.filePath, "insuranceSearch&time="+mstr+".txt")
                        
                        if flow.request.path.find("api/search-server/v1/insurance/disease") != -1:
                            # 疾病搜索
                            filename = os.path.join(self.filePath, "insuranceDisease&time="+mstr+".txt")

                        if flow.request.path.find("api/search-server/v1/insurance/universal/search") != -1:
                            # 搜万能
                            filename = os.path.join(self.filePath, "universalSearch&time="+mstr+".txt")

                        if flow.request.path.find("api/search-server/v1/insurance/bonus/search") != -1:
                            # 分红实现率
                            filename = os.path.join(self.filePath, "bonusSearch&time="+mstr+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/clause/info") != -1 and flow.request.query["cid"]:
                            # pdf
                            filename = os.path.join(self.filePath, "clauseInfo&token="+token+"&cid="+flow.request.query["cid"]+".txt")
                            self.pdf_deal(flow.response.content.decode('utf-8'))
                            return

                        if flow.request.path.find("api/insurance-server/v1/clause/structure") != -1 and flow.request.query["id"]:
                            # 责任摘要
                            print('================责任摘要')
                            filename = os.path.join(self.filePath, "clauseStructure&token="+token+"&cid="+flow.request.query["id"]+".txt")
                            self.clause_detail_deal(token, self.token_last_login_time_dict[token], self.token_uid_dict[token], flow.request.query["id"], json.loads(flow.response.content.decode('utf-8'))['data'])
                            #self.clause_detail_deal(token, self.token_last_login_time_dict[token], self.token_uid_dict[token], flow.request.query["id"], flow.response.content.decode().encode('utf-8').decode('unicode_escape'))
                            return

                        if flow.request.path.find("api/insurance-server/v1/invest/lap") != -1:
                            # 利益演示
                            filename = os.path.join(self.filePath, "investLap&token="+token+"&"+str(pathParams)+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/invest/reduction") != -1:
                            # 减保
                            filename = os.path.join(self.filePath, "investReduction&token="+token+"&"+str(pathParams)+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/tools/clause/compare") != -1:
                            # 重疾对比
                            filename = os.path.join(self.filePath, "diseaseCompare&token="+token+"&cids="+pathParams+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/company/riskdata") != -1:
                            # 保险公司风险信息
                            filename = os.path.join(self.filePath, "companyRiskdata&token="+token+"&cid="+flow.request.query("cid")+"&time="+flow.request.query("time")+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/clause/universal/rate") != -1:
                            # 万能险利率
                            filename = os.path.join(self.filePath, "universalRate&token="+token+"&"+str(pathParams)+".txt")
                        
                        if flow.request.path.find("api/insurance-server/v1/clause/bonus/rate") != -1:
                            # 分红险利率
                            filename = os.path.join(self.filePath, "bonusRate&token="+token+"&"+str(pathParams)+".txt")
                        
                        if filename:
                            f: TextIO = open(filename, "w")
                            # unicode 转为 中文
                            f.write(flow.response.content.decode('utf-8'))
                            #f.write(flow.response.content.decode('utf-8').encode('utf-8').decode('unicode_escape'))
                            f.close()
                    else:
                        try:
                            if flow.request.path.find("api/search-server/v1/insurance/search") != -1 or (
                                    flow.request.path.find("api/insurance-server/v1/clause/info") != -1 and
                                    flow.request.query["cid"]) or (
                                    flow.request.path.find("api/insurance-server/v1/clause/structure") != -1 and
                                    flow.request.query["id"]):
                                content = flow.response.content.decode('utf-8')
                                print(f'res_error {content}')
                                self.redis.hset(jxxs_err_key, ip, content)
                                self.redis.expire(jxxs_err_key, 10)
                        finally:
                            pass


    def done(self):
        self.f.close()

    def deal_insurance_search(self, content):
        task_clause_list_item_count_key = 'spider:task_clause_list_item_count'
        task_clause_list_item_has_tags_key = 'spider:task_clause_list_item_has_tags'
        ip_address = self.get_ip_address()
        self.redis.hdel(task_clause_list_item_count_key, ip_address)
        self.redis.hdel(task_clause_list_item_has_tags_key, ip_address)
        data = json.loads(content)
        total = data['data']['total']
        tags_length = len(data['data']['records'][0]['tags'])
        if total is not None and total > 0:
            self.redis.hset(task_clause_list_item_count_key, ip_address, total)
            self.redis.hset(task_clause_list_item_has_tags_key, ip_address, str(tags_length))

        #count = self.redis.hget(task_clause_list_item_count_key, ip_address)
        #if count is not None and int(count) > 1:
        #    print(f'count {count}')

    def test_redis(self):
        if self.redis:
            try :
                self.redis.set('mitmproxy:test', 1)
            except Exception as e:
                self.gen_redis()



addons = [Writer()]

if __name__ == '__main__':
    #Writer().deal_insurance_search('{"errcode": 200, "errmsg": "\u6210\u529f", "ts": 1715046166, "data": {"current": 1, "total": 2, "size": 20, "agg": ["1273500294935879680"], "rename_company": null, "records": [{"doc_type": "clause", "id": "041064a8-7a82-4e4b-90fc-a1457386b5da", "cid": "041064a8-7a82-4e4b-90fc-a1457386b5da", "unique_cid": "unq84701-7547-46d5-af61-f7f37ce18d17","alias": null, "highlight_alias": null, "company_id": "1273500294935879680",  "company_logo": "http://nbfile.oss-cn-zhangjiakou.aliyuncs.com/prod/company_info/logo/1676360890338_5070.png", "category_code": "ProdTypeCode_02_01_00_02", "pdf_size": 345807, "create_time": "2023-04-09 00:00:58", "have_similarity": false, "similarity_count": 0, "cpd_status": 20, "need_manual": 0, "manual_mark": 0, "tags": [{"code": "ClauseTag_004_001", "name": "\u5c11\u513f\u91cd\u75be"}, {"code": "ClauseTag_005_002", "name": "\u91cd\u75be\u7ed9\u4ed8:4\u6b21"}], "gp": null}, {"doc_type": "clause", "id": "54469a52-858f-4b11-bf72-3d0fdd9e7c6a", "cid": "54469a52-858f-4b11-bf72-3d0fdd9e7c6a", "unique_cid": "unq01b9d-e0b0-4a87-80a9-d96a7d914f1f", "company_id": "1273500294935879680", "company_logo": "http://nbfile.oss-cn-zhangjiakou.aliyuncs.com/prod/company_info/logo/1676360890338_5070.png", "category_code": "ProdTypeCode_02_01_00_02", "category_name": "\u5176\u4ed6\u4fdd\u9669", "underwriting_mode": "\u4e2a\u4eba", "insurance_period_type": "\u77ed\u671f", "insurance_type": "\u4e3b\u9669", "literal_coding": "\u534e\u6cf0\u4eba\u5bff[2024]\u75be\u75c5\u4fdd\u9669003\u53f7", "literal_year": 2024, "sale_status": true, "white_status": 0, "pdf_url": "", "pdf_size": 14058204, "create_time": "2024-04-19 11:30:42", "have_similarity": false, "similarity_count": 0, "cpd_status": 20, "need_manual": 0, "manual_mark": 0, "tags": [], "gp": null}]}}')
    #Writer().pdf_deal('{"errcode":200,"errmsg":"成功","ts":1708681300,"data":{"id":"94373","category_code":"ProdTypeCode_03","literal_time":"2202.30154","pdf_size":175739,"cid":"pi3368d4-85e5-4e7e-b618-3982dd890756","category_name":"意外伤害保险","sale_status":"yes","spider_type":"company","unique_cid":"unq39b29-fe26-495e-ba4b-8a14b5211e56","underwriting_mode":"personal","sale_stop_time":null,"need_manual":0,"name":"华泰财险附加放射治疗意外并发症保险条款","insurance_period_type":"short-term","on_the_shelf":"yes","manual_mark":0,"source_name":null,"insurance_type":"additional","pdf_url":"prod/insurance_info/pdf/pi3368d4-85e5-4e7e-b618-3982dd890756.pdf","white_status":0,"alias":null,"literal_coding":"C00015413402202306130154","insurance_rule":null,"create_time":"2023-10-15 11:15:55","company_id":"1518134104565096448","payment_method":null,"cpd_status":20,"update_time":"2023-10-15 11:45:51","literal_year":"2202","company_name":"华泰财产保险有限公司","company":"华泰财产保险有限公司","company_logo":"http://nbfile.oss-cn-zhangjiakou.aliyuncs.com/prod/company_info/logo/1650786678815_5395.jpeg","pdf_url_real":"https://nbprivate.oss-cn-zhangjiakou.aliyuncs.com/prod%2Finsurance_info%2Fpdf%2Fpi3368d4-85e5-4e7e-b618-3982dd890756.pdf?OSSAccessKeyId=LTAI4G84hRNBwHxwhZt8esR6&Expires=1708681900&Signature=2KAF0a1KReQV8bKSf3l0%2F4nFAwA%3D","tag_list":[]}}')
    Writer().clause_detail_deal('c375483d19bd60536ec02375af2f678d', 1715852404285, '1768116403065462784', '967a55db-5eec-4d6d-a582-7486a88987f6', '')
